{
  "apply_to": [
    "**/*.java"
  ],
  "indent": {
    "size": 4,
    "style": "space"
  },
  "rules": {
    "java": {
      "imports": {
        "organize": true,
        "groups": [
          "java.",
          "javax.",
          "org.springframework.",
          "com.danielagapov.spawn.",
          "lombok."
        ]
      },
      "style": {
        "braces": "same_line",
        "max_line_length": 120
      },
      "completion": {
        "include_snippets": true,
        "auto_import": true
      }
    },
    "controllers": {
      "apply_to": [
        "**/Controllers/**/*.java"
      ],
      "tags": ["api", "controller"],
      "snippets": {
        "rest_controller": {
          "prefix": "restcontroller",
          "body": [
            "@RestController",
            "@RequestMapping(\"${1:path}\")",
            "public class ${2:${TM_FILENAME_BASE}} {",
            "    ",
            "    @Autowired",
            "    private ${3:Service} ${4:service};",
            "    ",
            "    $0",
            "}"
          ],
          "description": "Create a REST controller"
        },
        "get_mapping": {
          "prefix": "getmapping",
          "body": [
            "@GetMapping(\"${1:path}\")",
            "public ResponseEntity<${2:ReturnType}> ${3:methodName}(${4:parameters}) {",
            "    $0",
            "    return ResponseEntity.ok(${5:result});",
            "}"
          ],
          "description": "Create a GET endpoint"
        },
        "post_mapping": {
          "prefix": "postmapping",
          "body": [
            "@PostMapping(\"${1:path}\")",
            "public ResponseEntity<${2:ReturnType}> ${3:methodName}(@RequestBody ${4:RequestType} ${5:requestName}) {",
            "    $0",
            "    return ResponseEntity.ok(${6:result});",
            "}"
          ],
          "description": "Create a POST endpoint"
        }
      }
    },
    "services": {
      "apply_to": [
        "**/Services/**/*.java"
      ],
      "tags": ["service", "business-logic"],
      "snippets": {
        "service_class": {
          "prefix": "service",
          "body": [
            "@Service",
            "public class ${1:${TM_FILENAME_BASE}} {",
            "    ",
            "    @Autowired",
            "    private ${2:Repository} ${3:repository};",
            "    ",
            "    $0",
            "}"
          ],
          "description": "Create a service class"
        }
      }
    },
    "repositories": {
      "apply_to": [
        "**/Repositories/**/*.java"
      ],
      "tags": ["repository", "data-access"],
      "snippets": {
        "repository_interface": {
          "prefix": "repository",
          "body": [
            "@Repository",
            "public interface ${1:${TM_FILENAME_BASE}} extends JpaRepository<${2:Entity}, ${3:Long}> {",
            "    $0",
            "}"
          ],
          "description": "Create a repository interface"
        }
      }
    },
    "models": {
      "apply_to": [
        "**/Models/**/*.java"
      ],
      "tags": ["entity", "model"],
      "snippets": {
        "entity_class": {
          "prefix": "entity",
          "body": [
            "@Entity",
            "@Table(name = \"${1:table_name}\")",
            "@Data",
            "@NoArgsConstructor",
            "@AllArgsConstructor",
            "public class ${2:${TM_FILENAME_BASE}} {",
            "    ",
            "    @Id",
            "    @GeneratedValue(strategy = GenerationType.IDENTITY)",
            "    private Long id;",
            "    ",
            "    $0",
            "}"
          ],
          "description": "Create an entity class"
        }
      }
    },
    "dtos": {
      "apply_to": [
        "**/DTOs/**/*.java"
      ],
      "tags": ["dto", "data-transfer"],
      "snippets": {
        "dto_class": {
          "prefix": "dto",
          "body": [
            "@Data",
            "@NoArgsConstructor",
            "@AllArgsConstructor",
            "public class ${1:${TM_FILENAME_BASE}} {",
            "    $0",
            "}"
          ],
          "description": "Create a DTO class"
        }
      }
    }
  },
  "ignore": [
    "**/target/**",
    "**/.mvn/**",
    "**/.idea/**",
    "**/node_modules/**"
  ],
  "navigation": {
    "quick_groups": [
      {
        "name": "Controllers",
        "pattern": "**/Controllers/**/*.java"
      },
      {
        "name": "Services",
        "pattern": "**/Services/**/*.java"
      },
      {
        "name": "Models",
        "pattern": "**/Models/**/*.java"
      },
      {
        "name": "Repositories",
        "pattern": "**/Repositories/**/*.java"
      },
      {
        "name": "DTOs",
        "pattern": "**/DTOs/**/*.java"
      },
      {
        "name": "Configs",
        "pattern": "**/Config/**/*.java"
      }
    ]
  },
  "hints": {
    "entity_relationships": "Use @OneToMany, @ManyToOne, @ManyToMany appropriately for entity relationships",
    "controller_api": "Consider using @Valid for request validation",
    "security": "Ensure proper authorization checks in controllers",
    "exception_handling": "Use @ExceptionHandler or @ControllerAdvice for centralized exception handling",
    "spring_data_queries": "Prefer native Spring Data JPA method names (e.g., countByField, findByFieldAndOtherField) over custom @Query JPQL when possible - they are cleaner, more maintainable, and provide automatic validation"
  },
  "test_maintenance": {
    "description": "CRITICAL: Always update test files when making model/DTO changes",
    "rules": [
      "Immediately identify affected test files - Search for all test files that reference the changed components",
      "Update test constructors - Remove/add parameters to match new constructor signatures",
      "Update test assertions - Modify test assertions to match new method signatures and available properties",
      "Remove deprecated references - Delete all references to removed fields, methods, or enum values",
      "Verify compilation - Ensure all test files compile without errors before considering the task complete"
    ],
    "examples": [
      "When removing enum values: Remove all EnumName.VALUE references from test constructors and assertions",
      "When removing DTO fields: Update test constructors to remove the parameter and update assertions to not access the removed getter",
      "When changing constructor signatures: Update all test instantiations to match new parameter order/count",
      "When removing methods: Remove all test calls to the deleted methods"
    ],
    "test_file_patterns": [
      "*Tests.java",
      "*Test.java",
      "src/test/**",
      "Mock object configurations that reference changed interfaces"
    ],
    "critical_note": "Failure to update tests is considered incomplete work. All compilation errors in test files must be resolved as part of the original change."
  }
} 