-- Final fix for Activity Type Order Num Constraint Issue
-- This migration removes the problematic unique constraint that prevents multiple users from having activity types with the same orderNum
-- The constraint name UKg65vbnmntlk2562ko8bg3kmbi is auto-generated by Hibernate and blocks orderNum=0 for multiple users

-- Drop the specific constraint by name if it exists
SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM information_schema.table_constraints 
     WHERE table_schema = DATABASE() 
     AND table_name = 'activity_type' 
     AND constraint_name = 'UKg65vbnmntlk2562ko8bg3kmbi') > 0,
    'ALTER TABLE activity_type DROP CONSTRAINT UKg65vbnmntlk2562ko8bg3kmbi',
    'SELECT 1'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Drop any remaining unique indexes on order_num column
SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM information_schema.statistics 
     WHERE table_schema = DATABASE() 
     AND table_name = 'activity_type' 
     AND column_name = 'order_num'
     AND non_unique = 0) > 0,
    CONCAT('DROP INDEX ', 
           (SELECT index_name FROM information_schema.statistics 
            WHERE table_schema = DATABASE() 
            AND table_name = 'activity_type' 
            AND column_name = 'order_num'
            AND non_unique = 0
            LIMIT 1), 
           ' ON activity_type'),
    'SELECT 1'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Create a proper composite unique constraint (creator_id, order_num) if it doesn't exist
-- This ensures each user can have their own sequence of order numbers starting from 0
SET @sql = (SELECT IF(
    (SELECT COUNT(*) FROM information_schema.table_constraints 
     WHERE table_schema = DATABASE() 
     AND table_name = 'activity_type' 
     AND constraint_name = 'UK_activity_type_creator_order') = 0,
    'ALTER TABLE activity_type ADD CONSTRAINT UK_activity_type_creator_order UNIQUE (creator_id, order_num)',
    'SELECT 1'
));
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- Verify the constraint was applied correctly
SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.table_constraints 
            WHERE table_schema = DATABASE() 
            AND table_name = 'activity_type' 
            AND constraint_name = 'UK_activity_type_creator_order'
        ) THEN 'SUCCESS: Composite unique constraint (creator_id, order_num) created'
        ELSE 'WARNING: Composite unique constraint not found'
    END as migration_status; 